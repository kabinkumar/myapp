name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set Up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Check Current Branch
        run: git branch --show-current
      
      - name: Debug File Structure
        run: find . -type f

     
      - name: Set up Docker
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t myapp:latest .
          docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Verify Kubeconfig
        run: |
          kubectl config view
          kubectl get nodes
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl apply -f ks8_deployment.yml
      #     echo "Waiting for deployment to be created..."
      #     sleep 30  # Give Kubernetes time to create the deployment
      #     kubectl get deployments
      #     kubectl rollout status deployment myapp || echo "Deployment might still be initializing..."
      - name: Deploy ArgoCD Application
        run: |
          kubectl apply -f deployments/argocd-app.yaml
          echo "Waiting for ArgoCD to detect changes..."
          sleep 30  # Allow ArgoCD to register the application

      - name: Sync ArgoCD Application
        run: |
          argocd app sync myapp || echo "ArgoCD sync might still be in progress."

  monitoring:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Deploy Prometheus and Grafana
        run: |
          kubectl apply -f deployments/prometheus.yaml
          kubectl apply -f deployments/grafana.yaml

      - name: Verify Monitoring Services
        run: |
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring